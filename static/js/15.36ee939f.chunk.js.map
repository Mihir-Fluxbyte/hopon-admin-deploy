{"version":3,"sources":["components/dashboard/customer/CustomerContactDetails.js","components/dashboard/customer/CustomerListTable.js","pages/dashboard/CustomerList.js"],"names":["CustomerContactDetails","props","useState","currentTab","setCurrentTab","Box","sx","mt","Card","display","flexDirection","margin","style","justifyContent","alignItems","marginBottom","padding","Avatar","height","width","src","customer","profilePic","Typography","color","ml","fontSize","variant","firstName","lastName","Tabs","indicatorColor","onChange","event","value","scrollButtons","textColor","label","map","tab","Tab","Divider","Table","TableBody","TableRow","TableCell","email","mobile","isActive","statusOptions","CustomerListTable","customers","page","setPage","limit","setLimit","query","setQuery","filters","setFilters","userId","setUserId","blockUserConfirm","setBlockUserConfirm","dispatch","useDispatch","handleBlockUser","a","loadingActions","increment","blockUserApi","isBlocked","UDataActions","setCustomerBlockStatus","toast","success","error","response","data","message","decrement","getUsers","getAllUsers","getUser","filteredCustomers","filter","matches","containsQuery","forEach","property","toString","toLowerCase","includes","blockStatus","status","applyFilters","Object","values","paginatedCustomers","slice","applyPagination","CardHeader","title","flexWrap","m","p","maxWidth","TextField","fullWidth","InputProps","startAdornment","InputAdornment","position","Search","target","placeholder","name","prevFilters","select","SelectProps","native","statusOption","marginLeft","Button","onClick","Sync","Scrollbar","minWidth","TableHead","align","length","colSpan","getInitials","Link","component","RouterLink","to","PAGES","RIDER_DETAILS","replace","id","customerId","TablePagination","count","onPageChange","newPage","onRowsPerPageChange","parseInt","rowsPerPage","rowsPerPageOptions","ConfirmationModal","open","handleClose","handleConfirm","description","cancleButtonName","confirmButtonName","CustomerList","settings","useSettings","reduxUsers","useSelector","state","UData","users","backgroundColor","minHeight","py","compact","container","spacing","item","aria-label","separator"],"mappings":"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","file":"static/js/15.36ee939f.chunk.js","sourcesContent":["import {\r\n  Avatar,\r\n  Box,\r\n  Card,\r\n  Divider,\r\n  Tab,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Tabs,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\n\r\nconst CustomerContactDetails = (props) => {\r\n  const [currentTab, setCurrentTab] = useState(\"details\");\r\n  const tabs = [{ label: \"Details\", value: \"details\" }];\r\n\r\n  const handleTabsChange = (event, value) => {\r\n    setCurrentTab(value);\r\n  };\r\n  return (\r\n    <Box sx={{ mt: 3 }}>\r\n      <Card>\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            margin: \"10px 10px 0px 10px\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"flex-start\",\r\n              alignItems: \"center\",\r\n              marginBottom: \"5px\",\r\n              padding: \"5px\",\r\n            }}\r\n          >\r\n            <Avatar\r\n              sx={{ height: \"120px\", width: \"120px\" }}\r\n              src={props.customer?.profilePic}\r\n            />\r\n            <Typography\r\n              color=\"textPrimary\"\r\n              sx={{ ml: 3, fontSize: \"25px\" }}\r\n              variant=\"subtitle2\"\r\n            >\r\n              {`${props.customer?.firstName} ${props.customer?.lastName}`}\r\n            </Typography>\r\n          </div>\r\n        </Box>\r\n        <Tabs\r\n          indicatorColor=\"primary\"\r\n          onChange={handleTabsChange}\r\n          scrollButtons=\"auto\"\r\n          textColor=\"primary\"\r\n          value={currentTab}\r\n          variant=\"scrollable\"\r\n        >\r\n          {tabs.map((tab) => {\r\n            return (\r\n              <Tab key={tab.value} label={tab.label}>\r\n                {tab.value}\r\n              </Tab>\r\n            );\r\n          })}\r\n        </Tabs>\r\n        <Divider />\r\n        <Table>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Typography color=\"textPrimary\" variant=\"subtitle2\">\r\n                  Email\r\n                </Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography color=\"textSecondary\" variant=\"body2\">\r\n                  {props.customer?.email}\r\n                </Typography>\r\n              </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Typography color=\"textPrimary\" variant=\"subtitle2\">\r\n                  Phone\r\n                </Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography color=\"textSecondary\" variant=\"body2\">\r\n                  {props.customer?.mobile}\r\n                </Typography>\r\n              </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Typography color=\"textPrimary\" variant=\"subtitle2\">\r\n                  Active Status\r\n                </Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography color=\"textSecondary\" variant=\"body2\">\r\n                  {props.customer?.isActive ? \"Active\" : \"InActive\"}\r\n                </Typography>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CustomerContactDetails;\r\n","/* eslint-disable no-unused-vars */\r\nimport { useState } from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { PAGES } from \"../../../constants\";\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Card,\r\n  CardHeader,\r\n  Divider,\r\n  Button,\r\n  InputAdornment,\r\n  Link,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport SearchIcon from \"../../../icons/Search\";\r\nimport getInitials from \"../../../utils/getInitials\";\r\nimport Scrollbar from \"../../Scrollbar\";\r\nimport ConfirmationModal from \"../../common/ConfirmationModal\";\r\nimport { blockUserApi, getAllUsers } from \"../../../api/UserApi\";\r\nimport toast from \"react-hot-toast\";\r\nimport { loadingActions } from \"../../../slices/Loading\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { UDataActions } from \"../../../slices/UData\";\r\nimport { Sync } from \"@material-ui/icons\";\r\n\r\n// Status Short-By\r\nconst statusOptions = [\r\n  {\r\n    label: \"All\",\r\n    value: \"all\",\r\n  },\r\n  {\r\n    label: \"Blocked\",\r\n    value: \"block\",\r\n  },\r\n  {\r\n    label: \"Unblocked\",\r\n    value: \"unblock\",\r\n  },\r\n];\r\n\r\n// Filter\r\nconst applyFilters = (customers, query, filters) =>\r\n  customers.filter((customer) => {\r\n    let matches = true;\r\n\r\n    if (query) {\r\n      const properties = [\"email\", \"firstName\", \"lastName\", \"mobile\"];\r\n      let containsQuery = false;\r\n\r\n      properties.forEach((property) => {\r\n        let value = customer[property].toString();\r\n        if (value && value.toLowerCase().includes(query.toLowerCase())) {\r\n          containsQuery = true;\r\n        }\r\n      });\r\n\r\n      if (!containsQuery) {\r\n        matches = false;\r\n      }\r\n    }\r\n\r\n    let blockStatus = customer.isActive ? \"unblock\" : \"block\";\r\n    if (filters.status && filters.status !== blockStatus) {\r\n      matches = false;\r\n    }\r\n\r\n    return matches;\r\n  });\r\n\r\n// Pagination\r\nconst applyPagination = (customers, page, limit) =>\r\n  customers.slice(page * limit, page * limit + limit);\r\n\r\nconst CustomerListTable = (props) => {\r\n  const { customers } = props;\r\n  const [page, setPage] = useState(0);\r\n  const [limit, setLimit] = useState(5);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [filters, setFilters] = useState({});\r\n  const [userId, setUserId] = useState();\r\n  const [blockUserConfirm, setBlockUserConfirm] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  // Search Handler\r\n  const handleQueryChange = (event) => {\r\n    setQuery(event.target.value);\r\n  };\r\n\r\n  // Status Handler\r\n  const handleStatusChange = (event) => {\r\n    let value = null;\r\n\r\n    if (event.target.value !== \"all\") {\r\n      value = event.target.value;\r\n    }\r\n\r\n    setFilters((prevFilters) => ({\r\n      ...prevFilters,\r\n      status: value,\r\n    }));\r\n  };\r\n\r\n  // Page Change\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  // Page Limit\r\n  const handleLimitChange = (event) => {\r\n    setLimit(parseInt(event.target.value, 10));\r\n  };\r\n\r\n  // Block Icon Click and set User ID in new State\r\n  const handleUserIdBlock = (customerId) => {\r\n    setUserId(customerId);\r\n    setBlockUserConfirm(true);\r\n  };\r\n\r\n  // Cancel Block User\r\n  const handleCancelBlock = () => {\r\n    setBlockUserConfirm(false);\r\n  };\r\n\r\n  // Block User API Call\r\n  const handleBlockUser = async () => {\r\n    try {\r\n      dispatch(loadingActions.increment());\r\n      const resolve = await blockUserApi({\r\n        userId: userId,\r\n        isBlocked: !customers[userId]?.isActive,\r\n      });\r\n      dispatch(\r\n        UDataActions.setCustomerBlockStatus({\r\n          userId: userId,\r\n          isBlocked: !customers[userId]?.isActive,\r\n        })\r\n      );\r\n      toast.success(\r\n        `${\r\n          customers[userId]?.isActive\r\n            ? \"User Blocked Successfully\"\r\n            : \"User UnBlocked Successfully\"\r\n        }`\r\n      );\r\n      setBlockUserConfirm(false);\r\n    } catch (error) {\r\n      toast.error(error.response.data.message);\r\n    } finally {\r\n      dispatch(loadingActions.decrement());\r\n    }\r\n  };\r\n\r\n  const getUsers = async () => {\r\n    try {\r\n      const response = await getAllUsers();\r\n      dispatch(UDataActions.getUser(response));\r\n    } catch (error) {\r\n      toast.error(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  const handleCustomerSync = ()=> {\r\n    getUsers();\r\n  };  \r\n\r\n  // ApplyFilters & Pagination\r\n  const filteredCustomers = applyFilters(\r\n    Object.values(customers),\r\n    query,\r\n    filters\r\n  );\r\n  const paginatedCustomers = applyPagination(filteredCustomers, page, limit);\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader title=\"Customers\" />\r\n        <Divider />\r\n        <Box\r\n          sx={{\r\n            alignItems: \"center\",\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\",\r\n            m: -1,\r\n            p: 2,\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              m: 1,\r\n              maxWidth: \"100%\",\r\n              width: 400,\r\n            }}\r\n          >\r\n            <TextField\r\n              fullWidth\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon fontSize=\"small\" />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              onChange={handleQueryChange}\r\n              placeholder=\"Search customers\"\r\n              value={query}\r\n              variant=\"outlined\"\r\n            />\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              m: 1,\r\n              maxWidth: \"100%\",\r\n              width: 240,\r\n            }}\r\n          >\r\n            <TextField\r\n              fullWidth\r\n              label=\"Customer Status\"\r\n              name=\"status\"\r\n              onChange={handleStatusChange}\r\n              select\r\n              SelectProps={{ native: true }}\r\n              value={filters.status || \"all\"}\r\n              variant=\"outlined\"\r\n            >\r\n              {statusOptions.map((statusOption) => (\r\n                <option key={statusOption.value} value={statusOption.value}>\r\n                  {statusOption.label}\r\n                </option>\r\n              ))}\r\n            </TextField>\r\n          </Box>\r\n          <Box style={{marginLeft : 'auto'}}>\r\n            <Button onClick={handleCustomerSync}>\r\n              <Sync />\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n        <Scrollbar>\r\n          <Box sx={{ minWidth: 700 }}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Name</TableCell>\r\n                  <TableCell>Email</TableCell>\r\n                  <TableCell>Contact Number</TableCell>\r\n                  <TableCell align=\"right\">Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n              {paginatedCustomers.length === 0 ? (<TableCell align={'center'} colSpan={'100%'}>No Records Found</TableCell>)\r\n            :\r\n                paginatedCustomers.map((customer) => {\r\n                  return (\r\n                    <TableRow key={customer?.id}>\r\n                      <TableCell>\r\n                        <Box\r\n                          sx={{\r\n                            alignItems: \"center\",\r\n                            display: \"flex\",\r\n                          }}\r\n                        >\r\n                          <Avatar\r\n                            src={customer?.profilePic}\r\n                            sx={{\r\n                              height: 42,\r\n                              width: 42,\r\n                            }}\r\n                          >\r\n                            {getInitials(customer?.firstName)}\r\n                          </Avatar>\r\n                          <Box sx={{ ml: 1 }}>\r\n                            <Link\r\n                              color=\"inherit\"\r\n                              component={RouterLink}\r\n                              to={`/${PAGES.RIDER_DETAILS.replace(\r\n                                \":id\",\r\n                                customer?.id\r\n                              )}`}\r\n                              variant=\"subtitle2\"\r\n                            >\r\n                              {`${customer?.firstName} ${customer?.lastName}`}\r\n                            </Link>\r\n                          </Box>\r\n                        </Box>\r\n                      </TableCell>\r\n                      <TableCell>{customer?.email}</TableCell>\r\n                      <TableCell>{customer?.mobile}</TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Button\r\n                          onClick={() => {\r\n                            handleUserIdBlock(customer?.id);\r\n                          }}\r\n                        >\r\n                          {customer?.isActive ? \"Block\" : \"UnBlock\"}\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </Box>\r\n        </Scrollbar>\r\n        <TablePagination\r\n          component=\"div\"\r\n          count={filteredCustomers.length}\r\n          onPageChange={handlePageChange}\r\n          onRowsPerPageChange={handleLimitChange}\r\n          page={page}\r\n          rowsPerPage={limit}\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n        />\r\n      </Card>\r\n      <ConfirmationModal\r\n        open={blockUserConfirm}\r\n        handleClose={handleCancelBlock}\r\n        handleConfirm={handleBlockUser}\r\n        title={`${customers[userId]?.isActive ? \"Block User\" : \"UnBlock User\"}`}\r\n        description={`${\r\n          customers[userId]?.isActive\r\n            ? \"Are you sure you want to block this user ?\"\r\n            : \"Are you sure you want to unblock user ?\"\r\n        }`}\r\n        cancleButtonName={\"No\"}\r\n        confirmButtonName={\"Yes\"}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomerListTable;\r\n","import { Link as RouterLink } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport {\r\n  Box,\r\n  Breadcrumbs,\r\n  Container,\r\n  Grid,\r\n  Link,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { CustomerListTable } from \"../../components/dashboard/customer\";\r\nimport ChevronRightIcon from \"../../icons/ChevronRight\";\r\nimport useSettings from \"../../hooks/useSettings\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n// Customer Details Api Call\r\nconst CustomerList = () => {\r\n  const { settings } = useSettings();\r\n  const reduxUsers = useSelector((state) => state.UData.users);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Customers | Hopon Admin</title>\r\n      </Helmet>\r\n      <Box\r\n        sx={{\r\n          backgroundColor: \"background.default\",\r\n          minHeight: \"100%\",\r\n          py: 8,\r\n        }}\r\n      >\r\n        <Container maxWidth={settings.compact ? \"xl\" : false}>\r\n          <Grid container justifyContent=\"space-between\" spacing={3}>\r\n            <Grid item>\r\n              <Typography color=\"textPrimary\" variant=\"h5\">\r\n              Customers\r\n              </Typography>\r\n              <Breadcrumbs\r\n                aria-label=\"breadcrumb\"\r\n                separator={<ChevronRightIcon fontSize=\"small\" />}\r\n                sx={{ mt: 1 }}\r\n              >\r\n                <Link\r\n                  color=\"textPrimary\"\r\n                  component={RouterLink}\r\n                  to=\"/riders\"\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  Customer Management\r\n                </Link>\r\n                <Typography color=\"textSecondary\" variant=\"subtitle2\">\r\n                Customers\r\n                </Typography>\r\n              </Breadcrumbs>\r\n            </Grid>\r\n          </Grid>\r\n          <Box sx={{ mt: 3 }}>\r\n            <CustomerListTable customers={reduxUsers} />\r\n          </Box>\r\n        </Container>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomerList;\r\n"],"sourceRoot":""}