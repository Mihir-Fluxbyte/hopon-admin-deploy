{"version":3,"sources":["components/dashboard/driver/DriverListTable.js","components/dashboard/driver/DriverContactDetails.js","images/cancel_white.svg","components/common/MultipleImageModal.js","components/dashboard/driver/DriverDocuments.js","components/dashboard/driver/DriverPaymentHistory.js","components/dashboard/driver/DriverOrders.js","components/dashboard/driver/DriveEarnings.js","components/dashboard/driver/DriverDetailsTab.js"],"names":["statusOptions","label","value","statusOptions2","getDriverStatusOption2","driverStatus","pending","color","text","accepted","rejected","Label","DriverListTable","props","drivers","useState","page","setPage","limit","setLimit","query","setQuery","status","filters","setFilters","filters2","setFilters2","driverId","setDriverId","blockDriverConfirm","setBlockDriverConfirm","dispatch","useDispatch","handleBlockDriver","a","loadingActions","increment","blockUserApi","userId","isBlocked","isActive","UDataActions","setDriverBlockStatus","toast","success","error","response","data","message","decrement","getUsers","getAllUsers","getUser","filteredDrivers","filter","driver","matches","containsQuery","forEach","property","helper","toString","toLowerCase","includes","blockStatus","driverDetail","approvalStatus","applyFilters","Object","values","paginatedDrivers","slice","applyPagination","Card","CardHeader","title","Divider","Box","sx","alignItems","display","flexWrap","m","p","maxWidth","width","TextField","fullWidth","InputProps","startAdornment","InputAdornment","position","Search","fontSize","onChange","event","target","placeholder","variant","name","prevFilters","select","SelectProps","native","map","statusOption","prevFilters2","statusOption2","style","marginLeft","Button","onClick","Sync","Scrollbar","minWidth","Table","TableHead","TableRow","TableCell","align","TableBody","length","colSpan","Avatar","src","profilePic","height","getInitials","firstName","ml","textTransform","Link","component","RouterLink","to","PAGES","DRIVER_DETAILS","replace","id","lastName","email","GHS","className","totalEarning","mobile","vehicleTypeId","vehicleNumber","handleDriverIdBlock","TablePagination","count","onPageChange","newPage","onRowsPerPageChange","parseInt","rowsPerPage","rowsPerPageOptions","ConfirmationModal","open","handleClose","handleConfirm","description","cancleButtonName","confirmButtonName","getDriverStatusOption","DriverContactDetails","Grid","justifyContent","Typography","drivingLicenseId","proofId","MultipleImageModal","index","image","isOpen","setIsOpen","flexDirection","padding","objectFit","border","borderRadius","alt","Modal","zIndex","cursor","top","right","close","verticalAlign","DriverDocuments","console","log","img1","drivingLicenseDocument","img2","proofDocument","img3","vehicleInsuranceDocument","img4","vehicleOwnershipDocument","images","img","container","spacing","item","lg","md","xl","xs","gridColumn","gridRow","DriverPaymentHistory","paymentHistory","setpaymentHistory","LoadHistory","getPaymentHistory","driversPayment","payment","useEffect","TableContainer","Paper","aria-label","row","scope","rideRequestIds","amount","paymentStatus","paidAt","Date","toLocaleDateString","getHours","getMinutes","DriverOrders","DriveEarnings","driversEarnings","earningFromCashPayment","earningFromOnlinePayment","earningFromTipPayment","tabs","DriverDetailsTab","currentTab","setCurrentTab","setUserId","approveDriver","setApproveDriver","rejectDriver","setRejectDriver","handleApproveDriverbyId","approveDriverApi","setApproveStatusDriver","handleRejectDriverbyId","rejectDriverApi","mt","margin","marginBottom","Tabs","indicatorColor","scrollButtons","textColor","tab","Tab","bottom","size","user","marginRight","borderColor","background"],"mappings":"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","file":"static/js/3.3e629100.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport { useState } from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport { PAGES } from \"../../../constants\";\r\nimport { loadingActions } from \"../../../slices/Loading\";\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Card,\r\n  CardHeader,\r\n  Divider,\r\n  InputAdornment,\r\n  Link,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport SearchIcon from \"../../../icons/Search\";\r\nimport getInitials from \"../../../utils/getInitials\";\r\nimport Scrollbar from \"../../Scrollbar\";\r\nimport { blockUserApi, getAllUsers } from \"../../../api/UserApi\";\r\nimport ConfirmationModal from \"../../common/ConfirmationModal\";\r\nimport Label from \"../../Label\";\r\nimport toast from \"react-hot-toast\";\r\nimport { UDataActions } from \"../../../slices/UData\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Button } from \"@mui/material\";\r\nimport { isArray } from \"lodash\";\r\nimport * as helper from '../../common/helper';\r\nimport GHS from \"../../../icons/GHS\";\r\nimport { Sync } from \"@material-ui/icons\";\r\n\r\n// Status Sort-By\r\nconst statusOptions = [\r\n  {\r\n    label: \"All\",\r\n    value: \"all\",\r\n  },\r\n  {\r\n    label: \"Blocked\",\r\n    value: \"block\",\r\n  },\r\n  {\r\n    label: \"Unblocked\",\r\n    value: \"unblock\",\r\n  },\r\n];\r\n\r\n// Driver Approval Status Sorting\r\nconst statusOptions2 = [\r\n  {\r\n    label: \"All\",\r\n    value: \"all\",\r\n  },\r\n  {\r\n    label: \"Pending\",\r\n    value: \"pending\",\r\n  },\r\n  {\r\n    label: \"Approved\",\r\n    value: \"accepted\",\r\n  },\r\n  {\r\n    label: \"Rejected\",\r\n    value: \"rejected\",\r\n  },\r\n];\r\n\r\nconst getDriverStatusOption2 = (driverStatus) => {\r\n  const map = {\r\n    pending: {\r\n      color: \"warning\",\r\n      text: \"Pending\",\r\n    },\r\n    accepted: {\r\n      color: \"success\",\r\n      text: \"Approved\",\r\n    },\r\n    rejected: {\r\n      color: \"error\",\r\n      text: \"Rejected\",\r\n    },\r\n  };\r\n  const { text, color } = map[driverStatus];\r\n\r\n  return <Label color={color}>{text}</Label>;\r\n};\r\n\r\nconst DriverListTable = (props) => {\r\n  const { drivers } = props;\r\n  // console.log('drivers', drivers)\r\n  const [page, setPage] = useState(0);\r\n  const [limit, setLimit] = useState(5);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [filters, setFilters] = useState({\r\n    status: null,\r\n  });\r\n  const [filters2, setFilters2] = useState({\r\n    status: null,\r\n  });\r\n  const [driverId, setDriverId] = useState();\r\n  const [blockDriverConfirm, setBlockDriverConfirm] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  // Search Filter\r\n  const applyFilters = (drivers, query, filters) =>\r\n    drivers.filter((driver) => {\r\n      let matches = true;\r\n\r\n      if (query) {\r\n        const properties = [\"email\", \"firstName\", \"lastName\", \"mobile\", \"driverDetail.vehicleNumber\" ];\r\n        let containsQuery = false;\r\n\r\n        properties.forEach((property) => {\r\n          let value = helper.get_object_value(driver,property,'')?.toString();\r\n          if (value && value.toLowerCase().includes(query.toLowerCase())) {\r\n            containsQuery = true;\r\n          }\r\n        });\r\n\r\n        if (!containsQuery) {\r\n          matches = false;\r\n        }\r\n      }\r\n\r\n      let blockStatus = driver.isActive ? \"unblock\" : \"block\";\r\n      if (filters.status && filters.status !== blockStatus) {\r\n        matches = false;\r\n      }\r\n\r\n      if (\r\n        filters2.status &&\r\n        driver.driverDetail.approvalStatus !== filters2.status\r\n      ) {\r\n        matches = false;\r\n      }\r\n      return matches;\r\n    });\r\n\r\n  // Pagination\r\n  const applyPagination = (drivers, page, limit) =>\r\n    drivers.slice(page * limit, page * limit + limit);\r\n\r\n  // Search Query Change\r\n  const handleQueryChange = (event) => {\r\n    setQuery(event.target.value);\r\n  };\r\n\r\n  // Status Change Handle\r\n  const handleStatusChange = (event) => {\r\n    let value = null;\r\n\r\n    if (event.target.value !== \"all\") {\r\n      value = event.target.value;\r\n    }\r\n\r\n    setFilters((prevFilters) => ({\r\n      ...prevFilters,\r\n      status: value,\r\n    }));\r\n  };\r\n\r\n  // Status Change Handle 2\r\n  const handleStatusChange2 = (event) => {\r\n    let value = null;\r\n\r\n    if (event.target.value !== \"all\") {\r\n      value = event.target.value;\r\n      // console.log(value)\r\n    }\r\n\r\n    setFilters2((prevFilters2) => ({\r\n      ...prevFilters2,\r\n      status: value,\r\n    }));\r\n  };\r\n\r\n  // Pagination Handle\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  // Page Limit\r\n  const handleLimitChange = (event) => {\r\n    setLimit(parseInt(event.target.value, 10));\r\n  };\r\n\r\n  // Block Icon Click and set User ID in new State\r\n  const handleDriverIdBlock = (driverId) => {\r\n    setDriverId(driverId);\r\n    setBlockDriverConfirm(true);\r\n  };\r\n\r\n  // Cancel Block User\r\n  const handleCancelBlock = () => {\r\n    setBlockDriverConfirm(false);\r\n  };\r\n\r\n  // Block Driver API Call\r\n  const handleBlockDriver = async () => {\r\n    try {\r\n      dispatch(loadingActions.increment());\r\n      const resolve = await blockUserApi({\r\n        userId: driverId,\r\n        isBlocked: !drivers[driverId]?.isActive,\r\n      });\r\n      dispatch(\r\n        UDataActions.setDriverBlockStatus({\r\n          userId: driverId,\r\n          isBlocked: !drivers[driverId]?.isActive,\r\n        })\r\n      );\r\n      toast.success(\r\n        `${\r\n          drivers[driverId]?.isActive\r\n            ? \"Driver blocked successfully\"\r\n            : \"Driver unblocked successfully\"\r\n        }`\r\n      );\r\n      setBlockDriverConfirm(false);\r\n    } catch (error) {\r\n      toast.error(error.response.data.message);\r\n    } finally {\r\n      dispatch(loadingActions.decrement());\r\n    }\r\n  };\r\n\r\n  const getUsers = async () => {\r\n    try {\r\n      const response = await getAllUsers();\r\n      dispatch(UDataActions.getUser(response));\r\n    } catch (error) {\r\n      toast.error(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  const handleDriverSync = () => {\r\n    getUsers();\r\n  };\r\n\r\n  // ApplyFilter\r\n  const filteredDrivers = applyFilters(Object.values(drivers), query, filters);\r\n  const paginatedDrivers = applyPagination(filteredDrivers, page, limit);\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader title=\"Drivers\" />\r\n        <Divider />\r\n        <Box\r\n          sx={{\r\n            alignItems: \"center\",\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\",\r\n            m: -1,\r\n            p: 2,\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              m: 1,\r\n              maxWidth: \"100%\",\r\n              width: 400,\r\n            }}\r\n          >\r\n            <TextField\r\n              fullWidth\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon fontSize=\"small\" />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              onChange={handleQueryChange}\r\n              placeholder=\"Search drivers\"\r\n              value={query}\r\n              variant=\"outlined\"\r\n            />\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              m: 1,\r\n              maxWidth: \"100%\",\r\n              width: 240,\r\n            }}\r\n          >\r\n            <TextField\r\n              fullWidth\r\n              label=\"Driver Status\"\r\n              name=\"status\"\r\n              onChange={handleStatusChange}\r\n              select\r\n              SelectProps={{ native: true }}\r\n              value={filters.status || \"all\"}\r\n              variant=\"outlined\"\r\n            >\r\n              {statusOptions.map((statusOption) => (\r\n                <option key={statusOption.value} value={statusOption.value}>\r\n                  {statusOption.label}\r\n                </option>\r\n              ))}\r\n            </TextField>\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              m: 1,\r\n              maxWidth: \"100%\",\r\n              width: 240,\r\n            }}\r\n          >\r\n            <TextField\r\n              fullWidth\r\n              label=\"Driver Profile Status\"\r\n              name=\"status\"\r\n              onChange={handleStatusChange2}\r\n              select\r\n              SelectProps={{ native: true }}\r\n              value={filters2?.status || \"all\"}\r\n              variant=\"outlined\"\r\n            >\r\n              {statusOptions2.map((statusOption2) => (\r\n                <option key={statusOption2.value} value={statusOption2.value}>\r\n                  {statusOption2.label}\r\n                </option>\r\n              ))}\r\n            </TextField>\r\n          </Box>\r\n          <Box style={{marginLeft : 'auto'}}>\r\n            <Button onClick={handleDriverSync}>\r\n              <Sync />\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n        <Scrollbar>\r\n          <Box sx={{ minWidth: 700 }}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Name</TableCell>\r\n                  <TableCell>Email</TableCell>\r\n                  <TableCell>Earnings</TableCell>\r\n                  <TableCell>Contact Number</TableCell>\r\n                  <TableCell>Vehicle Type</TableCell>\r\n                  <TableCell>Vehicle Number</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell align=\"right\">Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>{paginatedDrivers.length === 0 ? (<TableCell align={'center'} colSpan={'100%'}>No Records Found</TableCell>)\r\n            :\r\n              \r\n                paginatedDrivers.map((driver) => {\r\n                  return (\r\n                    <TableRow key={driver?.id}>\r\n                      <TableCell>\r\n                        <Box\r\n                          sx={{\r\n                            alignItems: \"center\",\r\n                            display: \"flex\",\r\n                          }}\r\n                        >\r\n                          <Avatar\r\n                            src={driver?.profilePic}\r\n                            sx={{\r\n                              height: 42,\r\n                              width: 42,\r\n                            }}\r\n                          >\r\n                            {getInitials(driver?.firstName)}\r\n                          </Avatar>\r\n                          <Box sx={{ ml: 1, textTransform: \"capitalize\" }}>\r\n                            <Link\r\n                              color=\"inherit\"\r\n                              component={RouterLink}\r\n                              to={`/${PAGES.DRIVER_DETAILS.replace(\r\n                                \":id\",\r\n                                driver.id\r\n                              )}`}\r\n                              variant=\"subtitle2\"\r\n                            >\r\n                              {`${driver?.firstName} ${driver?.lastName}`}\r\n                            </Link>\r\n                          </Box>\r\n                        </Box>\r\n                      </TableCell>\r\n                      <TableCell>{`${driver?.email}`}</TableCell>\r\n                      <TableCell>\r\n                      <GHS className='small' />\r\n                      {driver?.driverDetail?.totalEarning}\r\n                      </TableCell>\r\n                      <TableCell>{driver?.mobile}</TableCell>\r\n                      <TableCell>\r\n                        {driver?.driverDetail.vehicleTypeId}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {driver?.driverDetail.vehicleNumber}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {driver?.driverDetail.approvalStatus ? (\r\n                          getDriverStatusOption2(\r\n                            driver?.driverDetail.approvalStatus\r\n                          )\r\n                        ) : (\r\n                          <></>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"right\"\r\n                        onClick={() => {\r\n                          handleDriverIdBlock(driver.id);\r\n                        }}\r\n                      >\r\n                        <Button>\r\n                          {driver?.isActive ? \"Block\" : \"Unblock\"}\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </Box>\r\n        </Scrollbar>\r\n        <TablePagination\r\n          component=\"div\"\r\n          count={filteredDrivers.length}\r\n          onPageChange={handlePageChange}\r\n          onRowsPerPageChange={handleLimitChange}\r\n          page={page}\r\n          rowsPerPage={limit}\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n        />\r\n      </Card>\r\n      <ConfirmationModal\r\n        open={blockDriverConfirm}\r\n        handleClose={handleCancelBlock}\r\n        handleConfirm={handleBlockDriver}\r\n        title={`${\r\n          drivers[driverId]?.isActive ? \"Block Driver\" : \"UnBlock Driver\"\r\n        }`}\r\n        description={`${\r\n          drivers[driverId]?.isActive\r\n            ? \"Are you sure you want to block this driver ?\"\r\n            : \"Are you sure you want to unblock this driver ?\"\r\n        }`}\r\n        cancleButtonName={\"No\"}\r\n        confirmButtonName={\"Yes\"}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DriverListTable;\r\n","import {\r\n  Grid,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport Label from \"../../Label\";\r\n\r\nconst getDriverStatusOption = (driverStatus) => {\r\n  const map = {\r\n    pending: {\r\n      color: \"warning\",\r\n      text: \"Pending\",\r\n    },\r\n    accepted: {\r\n      color: \"success\",\r\n      text: \"Approved\",\r\n    },\r\n    rejected: {\r\n      color: \"error\",\r\n      text: \"Rejected\",\r\n    },\r\n  };\r\n  const { text, color } = map[driverStatus];\r\n\r\n  return <Label color={color}>{text}</Label>;\r\n};\r\n\r\nconst DriverContactDetails = (props) => {\r\n  return (\r\n    <>\r\n      <Grid\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n        }}\r\n      ></Grid>\r\n      <Table>\r\n        <TableBody>\r\n          <TableRow>\r\n            <TableCell>\r\n              <Typography color=\"textPrimary\" variant=\"subtitle2\">\r\n                Email\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography color=\"textSecondary\" variant=\"body2\">\r\n                {props.drivers?.email}\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>\r\n              <Typography color=\"textPrimary\" variant=\"subtitle2\">\r\n                Contact\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography color=\"textSecondary\" variant=\"body2\">\r\n                {props.drivers?.mobile}\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>\r\n              <Typography color=\"textPrimary\" variant=\"subtitle2\">\r\n                Driving License Id\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography color=\"textSecondary\" variant=\"body2\">\r\n                {props.drivers?.driverDetail.drivingLicenseId}\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>\r\n              <Typography color=\"textPrimary\" variant=\"subtitle2\">\r\n                Driver Proof id\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography color=\"textSecondary\" variant=\"body2\">\r\n                {props.drivers?.driverDetail.proofId}\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>\r\n              <Typography color=\"textPrimary\" variant=\"subtitle2\">\r\n                Vehicle Type\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography color=\"textSecondary\" variant=\"body2\">\r\n                {props.drivers?.driverDetail.vehicleTypeId}\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>\r\n              <Typography color=\"textPrimary\" variant=\"subtitle2\">\r\n                Vehicle Number\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography color=\"textSecondary\" variant=\"body2\">\r\n                {props.drivers?.driverDetail.vehicleNumber}\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>\r\n              <Typography color=\"textPrimary\" variant=\"subtitle2\">\r\n                Driver Status\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography\r\n                color=\"textSecondary\"\r\n                variant=\"body2\"\r\n                sx={{ textTransform: \"capitalize\" }}\r\n              >\r\n                {props.drivers?.driverDetail.approvalStatus && getDriverStatusOption(\r\n                  props.drivers?.driverDetail.approvalStatus\r\n                )}\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DriverContactDetails;\r\n","export default __webpack_public_path__ + \"static/media/cancel_white.7bc301d2.svg\";","import { Box, Modal } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport close from '../../images/cancel_white.svg';\r\n\r\nconst MultipleImageModal = (props) => {\r\n  const { index, image, description, title } = props;\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setIsOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsOpen(false);\r\n  };\r\n  return (\r\n    <>\r\n      <Box onClick={handleOpen} sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', width: \"70%\", padding: \"5px\", marginLeft: '100px' }}>\r\n        <img\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"250px\",\r\n            objectFit: \"fill\",\r\n            border: \"1px solid black\",\r\n            borderRadius: \"5px\",\r\n            padding: \"5px\",\r\n          }}\r\n          src={image}\r\n          alt={description}\r\n        />\r\n        <Box>{title}</Box>\r\n      </Box>\r\n\r\n      <Modal\r\n        key={index}\r\n        open={isOpen}\r\n         sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          zIndex: \"1301\",\r\n        }}\r\n      >\r\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n          <div style={{ position: 'absolute', cursor: 'pointer', top: '6.12vh', right: '5.57vw'}}>\r\n            <img style={{ height: '100%', width: '100%' }} src={ close } alt=\"Not Available\" onClick={handleClose} />\r\n          </div>\r\n          <div style={{ width: '80vw', height: '80vh' }}>\r\n            <img\r\n              style={{ height: \"100%\", width: \"100%\", objectFit:'contain', verticalAlign: 'middle' }}\r\n              src={image}\r\n              alt={description}\r\n            />\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MultipleImageModal;\r\n","import { Grid } from \"@mui/material\";\r\nimport MultipleImageModal from \"../../common/MultipleImageModal\";\r\n\r\nconst DriverDocuments = (props) => {\r\n  console.log({\r\n    img1: props.drivers.driverDetail?.drivingLicenseDocument,\r\n    img2: props.drivers.driverDetail?.proofDocument,\r\n    img3: props.drivers.driverDetail?.vehicleInsuranceDocument,\r\n    img4: props.drivers.driverDetail?.vehicleOwnershipDocument\r\n  })\r\n  const images = [\r\n    {\r\n      id: 1,\r\n      title: \"Driving License\",\r\n      img: props.drivers.driverDetail?.drivingLicenseDocument\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Driver Proof\",\r\n      img: props.drivers.driverDetail?.proofDocument\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Vehicle Insurance\",\r\n      img: props.drivers.driverDetail?.vehicleInsuranceDocument\r\n    },\r\n    {\r\n      id: 4,\r\n      title: \"Vehicle Ownership\",\r\n      img: props.drivers.driverDetail?.vehicleOwnershipDocument\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div style={{ padding: \"10px\"}}>\r\n      <Grid container spacing={5}>\r\n        {images.map((image, index) => (\r\n          <Grid item lg={4} md={4} xl={4} xs={12} gridColumn='2' gridRow='2/12'>\r\n          {image.img ? \r\n            <MultipleImageModal\r\n              image={image.img}\r\n              index={index}\r\n              description={\"Not Found!\"}\r\n              title={image.title}\r\n            />\r\n            : ''\r\n          }\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DriverDocuments;\r\n","import { Grid } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport Table from '@mui/material/Table';\r\nimport { getPaymentHistory } from \"../../../api/PaymentsApi\";\r\nimport { useEffect } from \"react\";\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nconst DriverPaymentHistory = (props) => {\r\n  console.log(props,\"this is props from DriverPaymentHistory\");\r\n  const [paymentHistory, setpaymentHistory] = useState([]);\r\n  const LoadHistory = async()=>{\r\n    const payment = await getPaymentHistory(props.driversPayment.id);\r\n    console.log(payment,\"payment history\")\r\n    setpaymentHistory(payment)\r\n  }\r\n  useEffect(()=>{\r\n    LoadHistory();\r\n  },[])\r\n\r\n\r\n  return (\r\n    <div style={{ padding: \"10px\"}}>\r\n      <Grid container spacing={5}>\r\n      <Grid item lg={12} md={12} xl={12} xs={12} gridColumn='1' gridRow='1/12'>\r\n        <TableContainer component={Paper}>\r\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Ride Request IDs</TableCell>\r\n              <TableCell align=\"right\">Amount</TableCell>\r\n              <TableCell align=\"right\">Payment Status</TableCell>\r\n              <TableCell align=\"right\">Time</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {paymentHistory.length === 0 ? (<TableCell align={'center'} colSpan={'100%'}>No Records Found</TableCell>)\r\n              : paymentHistory.map((row) => (\r\n              <TableRow\r\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n              >\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.rideRequestIds}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.amount}</TableCell>\r\n                <TableCell align=\"right\">{row.paymentStatus}</TableCell>\r\n                {(row.paidAt) === null\r\n                          ? <TableCell align=\"right\">-</TableCell>\r\n                          : <TableCell align=\"right\">{`${new Date(row?.paidAt).toLocaleDateString('en-US')} - ${new Date(row?.paidAt).getHours()} : ${new Date(row?.paidAt).getMinutes()}`}</TableCell>\r\n                        }\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        </TableContainer>\r\n\r\n      </Grid>\r\n        {/* {images.map((image, index) => (\r\n          <Grid item lg={6} md={6} xl={6} xs={12} gridColumn='2' gridRow='2/12'>\r\n            <MultipleImageModal\r\n              image={image.img}\r\n              index={index}\r\n              description={\"Image Not Available\"}\r\n              title={image.title}\r\n            />\r\n          </Grid>\r\n        ))} */}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DriverPaymentHistory;\r\n","const DriverOrders = () => {\r\n  return <div>Driver Orders Page is Here.</div>;\r\n};\r\n\r\nexport default DriverOrders;\r\n","import React from 'react'\r\nimport {\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport GHS from '../../../icons/GHS';\r\n\r\nconst DriveEarnings = (props) => {\r\n    return (\r\n        <>\r\n            <Grid\r\n                sx={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                }}\r\n            ></Grid>\r\n            <Table>\r\n                <TableBody>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <Typography color=\"textPrimary\" variant=\"subtitle2\">\r\n                                Total Earning\r\n                            </Typography>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            <Typography color=\"textSecondary\" variant=\"body2\">\r\n                                <GHS fontSize=\"small\" />\r\n                                {props?.driversEarnings?.driverDetail?.totalEarning}\r\n                            </Typography>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <Typography color=\"textPrimary\" variant=\"subtitle2\">\r\n                                Earning From Cash Payment\r\n                            </Typography>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            <Typography color=\"textSecondary\" variant=\"body2\">\r\n                                <GHS fontSize=\"small\" />\r\n                                {props?.driversEarnings?.driverDetail?.earningFromCashPayment}\r\n                            </Typography>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <Typography color=\"textPrimary\" variant=\"subtitle2\">\r\n                                Earning From Online Payment\r\n                            </Typography>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            <Typography color=\"textSecondary\" variant=\"body2\">\r\n                                <GHS className='small' />\r\n                                {props?.driversEarnings?.driverDetail?.earningFromOnlinePayment}\r\n                            </Typography>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <Typography color=\"textPrimary\" variant=\"subtitle2\">\r\n                                Earning From Tip Payment\r\n                            </Typography>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            <Typography color=\"textSecondary\" variant=\"body2\">\r\n                                <GHS fontSize=\"small\" />\r\n                                {props?.driversEarnings?.driverDetail?.earningFromTipPayment}\r\n                            </Typography>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default DriveEarnings;\r\n","import {\r\n  Avatar,\r\n  Typography,\r\n  Box,\r\n  Card,\r\n  Divider,\r\n  Tab,\r\n  Tabs,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { approveDriverApi, rejectDriverApi } from \"../../../api/UserApi\";\r\nimport DriverContactDetails from \"./DriverContactDetails\";\r\nimport DriverDocuments from \"./DriverDocuments\";\r\nimport DriverPaymentHistory from \"./DriverPaymentHistory\";\r\nimport DriverOrders from \"./DriverOrders\";\r\nimport ConfirmationModal from \"../../common/ConfirmationModal\";\r\nimport { loadingActions } from \"../../../slices/Loading\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { UDataActions } from \"../../../slices/UData\";\r\nimport DriveEarnings from \"./DriveEarnings\";\r\n\r\nconst tabs = [\r\n  { label: \"Details\", value: \"details\" },\r\n  { label: \"Documents\", value: \"driverdocuments\" },\r\n  { label: \"Payment History\", value: \"driverpaymenthistory\" },\r\n  { label: \"Earnings\", value: \"earnings\" },\r\n];\r\n\r\nconst DriverDetailsTab = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [currentTab, setCurrentTab] = useState(\"details\");\r\n  const [driverId, setDriverId] = useState();\r\n  const [userId, setUserId] = useState();\r\n  const [approveDriver, setApproveDriver] = useState(false);\r\n  const [rejectDriver, setRejectDriver] = useState(false);\r\n\r\n  // Handles the Tab Change in the Driver Contact Tab\r\n  const handleTabsChange = (event, value) => {\r\n    setCurrentTab(value);\r\n  };\r\n\r\n  // Approve Button Click and stores driver id in new state.\r\n  const handleApproveDriver = (id,user) => {\r\n    setDriverId(id);\r\n    setUserId(user);\r\n    setApproveDriver(true);\r\n  };\r\n\r\n  // Cancel Approve Driver\r\n  const handleCancelApprove = () => {\r\n    setApproveDriver(false);\r\n  };\r\n\r\n  // Approve Driver API Call\r\n  const handleApproveDriverbyId = async () => {\r\n    try {\r\n      dispatch(loadingActions.increment());\r\n      // eslint-disable-next-line\r\n      const resolve = await approveDriverApi(driverId);\r\n      toast.success(\"Driver Approved Successfully\");\r\n      dispatch(UDataActions.setApproveStatusDriver({id:userId, status:'accepted'}));\r\n      setApproveDriver(false);\r\n    } catch (error) {\r\n      toast.error(\"Oops! Something Went Wrong\");\r\n    } finally {\r\n      dispatch(loadingActions.decrement());\r\n    }\r\n  };\r\n  // Reject Button Click and store driver id in new state.\r\n  const handleRejectDriver = (id,user) => {\r\n    setDriverId(id);\r\n    setUserId(user);\r\n    setRejectDriver(true);\r\n  };\r\n\r\n  // Cancel Reject Driver\r\n  const handleCancelReject = () => {\r\n    setRejectDriver(false);\r\n  };\r\n\r\n  // Reject Driver API Call\r\n  const handleRejectDriverbyId = async () => {\r\n    try {\r\n      dispatch(loadingActions.increment());\r\n      // eslint-disable-next-line\r\n      const resolve = await rejectDriverApi(driverId);\r\n      toast.success(\"Driver Reject Succesfully\");\r\n      dispatch(UDataActions.setApproveStatusDriver({id:userId, status:'rejected'}));\r\n      setRejectDriver(false);\r\n    } catch (error) {\r\n      toast.error(\"Oops! Something Went Wrong\");\r\n    }finally {\r\n      dispatch(loadingActions.decrement());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box sx={{ mt: 3 }}>\r\n        <Card>\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              margin: \"10px 10px 0 10px\",\r\n              position: \"relative\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"flex-start\",\r\n                alignItems: \"center\",\r\n                marginBottom: \"5px\",\r\n                padding: \"5px\",\r\n              }}\r\n            >\r\n              <Avatar\r\n                sx={{ height: \"120px\", width: \"120px\" }}\r\n                src={props.drivers?.profilePic}\r\n              />\r\n              <Typography\r\n                color=\"textPrimary\"\r\n                sx={{ ml: 3, fontSize: \"25px\" }}\r\n                variant=\"subtitle2\"\r\n              >\r\n                {`${props.drivers?.firstName} ${props.drivers?.lastName}`}\r\n              </Typography>\r\n            </div>\r\n            <Tabs\r\n              indicatorColor=\"primary\"\r\n              onChange={handleTabsChange}\r\n              scrollButtons=\"auto\"\r\n              textColor=\"primary\"\r\n              value={currentTab}\r\n              variant=\"scrollable\"\r\n            >\r\n              {tabs.map((tab) => {\r\n                return (\r\n                  <Tab key={tab.value} label={tab.label} value={tab.value} />\r\n                );\r\n              })}\r\n            </Tabs>\r\n            {props.drivers?.driverDetail?.approvalStatus === \"pending\" ? (\r\n              <div\r\n                style={{\r\n                  position: \"absolute\",\r\n                  right: \"0\",\r\n                  bottom: \"0\",\r\n                  margin: \"3px\",\r\n                }}\r\n              >\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  size=\"medium\"\r\n                  onClick={() => {\r\n                    handleApproveDriver(props.drivers?.driverDetail.driverId, props.drivers?.driverDetail.userId);\r\n                  }}\r\n                  sx={{\r\n                    color: \"blue\",\r\n                    marginRight: \"5px\",\r\n                    borderColor: \"blue\",\r\n                    \":hover\": {\r\n                      color: \"blue\",\r\n                      background: \"#dcddfc\",\r\n                      borderColor: \"blue\",\r\n                    },\r\n                  }}\r\n                >\r\n                  {[\"pending\", \"rejected\"].includes(\r\n                    props.drivers?.driverDetail?.approvalStatus\r\n                  )\r\n                    ? \"Approve\"\r\n                    : \"Approved\"}\r\n                </Button>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  size=\"medium\"\r\n                  onClick={() => {\r\n                    handleRejectDriver(props.drivers?.driverDetail.driverId, props.drivers?.driverDetail.userId);\r\n                  }}\r\n                  sx={{\r\n                    color: \"red\",\r\n                    borderColor: \"red\",\r\n                    \":hover\": {\r\n                      color: \"red\",\r\n                      background: \"#fce1dc\",\r\n                      borderColor: \"red\",\r\n                    },\r\n                  }}\r\n                >\r\n                  {[\"pending\", \"accepted\"].includes(\r\n                    props.drivers?.driverDetail?.approvalStatus\r\n                  )\r\n                    ? \"Reject\"\r\n                    : \"Rejected\"}\r\n                </Button>\r\n              </div>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </Box>\r\n          <Divider sx={{ m: 0 }} />\r\n          {currentTab === \"details\" && (\r\n            <DriverContactDetails drivers={props.drivers} />\r\n          )}\r\n          {currentTab === \"driverorders\" && <DriverOrders />}\r\n          {currentTab === \"driverdocuments\" && <DriverDocuments drivers={props.drivers} />}\r\n          {currentTab === \"driverpaymenthistory\" && <DriverPaymentHistory driversPayment={props.drivers} />}\r\n          {currentTab === \"earnings\" && <DriveEarnings driversEarnings={props.drivers} />}\r\n        </Card>\r\n      </Box>\r\n\r\n      {/* For Approval Confirmation */}\r\n      <ConfirmationModal\r\n        open={approveDriver}\r\n        handleClose={handleCancelApprove}\r\n        handleConfirm={handleApproveDriverbyId}\r\n        title={\"Approve Driver\"}\r\n        description={\"Are You Sure You Want to Approve Driver ?\"}\r\n        cancleButtonName={\"No\"}\r\n        confirmButtonName={\"Yes\"}\r\n      />\r\n\r\n      {/* For Reject Confirmation */}\r\n      <ConfirmationModal\r\n        open={rejectDriver}\r\n        handleClose={handleCancelReject}\r\n        handleConfirm={handleRejectDriverbyId}\r\n        title={\"Reject Driver\"}\r\n        description={\"Are You Sure You Want to Reject Driver ?\"}\r\n        cancleButtonName={\"No\"}\r\n        confirmButtonName={\"Yes\"}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DriverDetailsTab;\r\n"],"sourceRoot":""}