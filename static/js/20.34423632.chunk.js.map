{"version":3,"sources":["components/dashboard/account/AccountGeneralSettings.js","components/dashboard/account/AccountSecuritySettings.js","pages/dashboard/Account.js"],"names":["AccountGeneralSettings","props","Grid","container","spacing","item","lg","md","xl","xs","Card","CardContent","Box","sx","alignItems","display","flexDirection","textAlign","p","border","theme","palette","divider","borderRadius","Avatar","height","width","Typography","color","mt","variant","Link","component","RouterLink","to","CardActions","Button","fullWidth","validationSchema","Yup","shape","canHire","city","max","country","email","required","isPublic","name","phone","state","onSubmit","values","a","resetForm","setErrors","setStatus","setSubmitting","wait","success","toast","console","error","submit","message","errors","handleBlur","handleChange","handleSubmit","touched","isSubmitting","CardHeader","title","Divider","TextField","Boolean","helperText","label","onBlur","onChange","type","Autocomplete","getOptionLabel","option","text","renderInput","params","AccountSecuritySettings","initialValues","password","passwordConfirm","min","oneOf","sm","value","FormHelperText","justifyContent","disabled","tabs","Account","settings","useSettings","useState","currentTab","setCurrentTab","backgroundColor","minHeight","py","Container","maxWidth","compact","Breadcrumbs","aria-label","separator","ChevronRight","fontSize","Tabs","indicatorColor","event","scrollButtons","textColor","map","tab","Tab"],"mappings":"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","file":"static/js/20.34423632.chunk.js","sourcesContent":["import { Link as RouterLink } from \"react-router-dom\";\r\nimport toast from \"react-hot-toast\";\r\nimport * as Yup from \"yup\";\r\nimport { Formik } from \"formik\";\r\nimport {\r\n  Autocomplete,\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardHeader,\r\n  Divider,\r\n  Grid,\r\n  Link,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n// import useAuth from \"../../../hooks/useAuth\";\r\nimport wait from \"../../../utils/wait\";\r\n\r\nconst AccountGeneralSettings = (props) => {\r\n  // const { user } = useAuth();\r\n\r\n  return (\r\n    <Grid container spacing={3} {...props}>\r\n      <Grid item lg={4} md={6} xl={3} xs={12}>\r\n        <Card>\r\n          <CardContent>\r\n            <Box\r\n              sx={{\r\n                alignItems: \"center\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                textAlign: \"center\",\r\n              }}\r\n            >\r\n              <Box\r\n                sx={{\r\n                  p: 1,\r\n                  border: (theme) => `1px dashed ${theme.palette.divider}`,\r\n                  borderRadius: \"50%\",\r\n                }}\r\n              >\r\n                <Avatar\r\n                  // src={user.avatar}\r\n                  sx={{\r\n                    height: 100,\r\n                    width: 100,\r\n                  }}\r\n                />\r\n              </Box>\r\n              <Typography\r\n                color=\"textPrimary\"\r\n                sx={{ mt: 1 }}\r\n                variant=\"subtitle2\"\r\n              >\r\n                {/* {user.name} */}\r\n              </Typography>\r\n              <Typography color=\"textSecondary\" variant=\"body2\">\r\n                Your plan:{\" \"}\r\n                <Link\r\n                  color=\"primary\"\r\n                  component={RouterLink}\r\n                  to=\"/dashboard/account\"\r\n                >\r\n                  {/* {user.plan} */}\r\n                </Link>\r\n              </Typography>\r\n            </Box>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button color=\"primary\" fullWidth variant=\"text\">\r\n              Remove Picture\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item lg={8} md={6} xl={9} xs={12}>\r\n        <Formik\r\n          validationSchema={Yup.object().shape({\r\n            canHire: Yup.bool(),\r\n            city: Yup.string().max(255),\r\n            country: Yup.string().max(255),\r\n            email: Yup.string()\r\n              .email(\"Must be a valid email\")\r\n              .max(255)\r\n              .required(\"Email is required\"),\r\n            isPublic: Yup.bool(),\r\n            name: Yup.string().max(255).required(\"Name is required\"),\r\n            phone: Yup.string(),\r\n            state: Yup.string(),\r\n          })}\r\n          onSubmit={async (\r\n            values,\r\n            { resetForm, setErrors, setStatus, setSubmitting }\r\n          ) => {\r\n            try {\r\n              // NOTE: Make API request\r\n              await wait(200);\r\n              resetForm();\r\n              setStatus({ success: true });\r\n              setSubmitting(false);\r\n              toast.success(\"Profile updated!\");\r\n            } catch (err) {\r\n              console.error(err);\r\n              toast.error(\"Something went wrong!\");\r\n              setStatus({ success: false });\r\n              setErrors({ submit: err.message });\r\n              setSubmitting(false);\r\n            }\r\n          }}\r\n        >\r\n          {({\r\n            errors,\r\n            handleBlur,\r\n            handleChange,\r\n            handleSubmit,\r\n            isSubmitting,\r\n            touched,\r\n            values,\r\n          }) => (\r\n            <form onSubmit={handleSubmit}>\r\n              <Card>\r\n                <CardHeader title=\"Profile\" />\r\n                <Divider />\r\n                <CardContent>\r\n                  <Grid container spacing={4}>\r\n                    <Grid item md={6} xs={12}>\r\n                      <TextField\r\n                        error={Boolean(touched.name && errors.name)}\r\n                        fullWidth\r\n                        helperText={touched.name && errors.name}\r\n                        label=\"Name\"\r\n                        name=\"name\"\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        // value={values.name}\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item md={6} xs={12}>\r\n                      <TextField\r\n                        error={Boolean(touched.email && errors.email)}\r\n                        fullWidth\r\n                        helperText={\r\n                          touched.email && errors.email\r\n                            ? errors.email\r\n                            : \"We will use this email to contact you\"\r\n                        }\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        required\r\n                        type=\"email\"\r\n                        // value={values.email}\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item md={6} xs={12}>\r\n                      <TextField\r\n                        error={Boolean(touched.phone && errors.phone)}\r\n                        fullWidth\r\n                        helperText={touched.phone && errors.phone}\r\n                        label=\"Phone Number\"\r\n                        name=\"phone\"\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        // value={values.phone}\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item md={6} xs={12}>\r\n                      <Autocomplete\r\n                        getOptionLabel={(option) => option.text}\r\n                        renderInput={(params) => (\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Country\"\r\n                            name=\"country\"\r\n                            onChange={handleChange}\r\n                            variant=\"outlined\"\r\n                            {...params}\r\n                          />\r\n                        )}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item md={6} xs={12}>\r\n                      <TextField\r\n                        error={Boolean(touched.state && errors.state)}\r\n                        fullWidth\r\n                        helperText={touched.state && errors.state}\r\n                        label=\"State/Region\"\r\n                        name=\"state\"\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        // value={values.state}\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item md={6} xs={12}>\r\n                      <TextField\r\n                        error={Boolean(touched.city && errors.city)}\r\n                        fullWidth\r\n                        helperText={touched.city && errors.city}\r\n                        label=\"City\"\r\n                        name=\"city\"\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                        // value={values.city}\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default AccountGeneralSettings;\r\n","import toast from \"react-hot-toast\";\r\nimport * as Yup from \"yup\";\r\nimport { Formik } from \"formik\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Divider,\r\n  FormHelperText,\r\n  Grid,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport wait from \"../../../utils/wait\";\r\n\r\nconst AccountSecuritySettings = (props) => (\r\n  <Formik\r\n    initialValues={{\r\n      password: \"\",\r\n      passwordConfirm: \"\",\r\n      submit: null,\r\n    }}\r\n    validationSchema={Yup.object().shape({\r\n      password: Yup.string()\r\n        .min(7, \"Must be at least 7 characters\")\r\n        .max(255)\r\n        .required(\"Required\"),\r\n      passwordConfirm: Yup.string()\r\n        .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n        .required(\"Required\"),\r\n    })}\r\n    onSubmit={async (\r\n      values,\r\n      { resetForm, setErrors, setStatus, setSubmitting }\r\n    ) => {\r\n      try {\r\n        // NOTE: Make API request\r\n        await wait(500);\r\n        resetForm();\r\n        setStatus({ success: true });\r\n        setSubmitting(false);\r\n        toast.success(\"Password updated!\");\r\n      } catch (err) {\r\n        console.error(err);\r\n        toast.error(\"Something went wrong!\");\r\n        setStatus({ success: false });\r\n        setErrors({ submit: err.message });\r\n        setSubmitting(false);\r\n      }\r\n    }}\r\n  >\r\n    {({\r\n      errors,\r\n      handleBlur,\r\n      handleChange,\r\n      handleSubmit,\r\n      isSubmitting,\r\n      touched,\r\n      values,\r\n    }) => (\r\n      <form onSubmit={handleSubmit} {...props}>\r\n        <Card>\r\n          <CardHeader title=\"Change Password\" />\r\n          <Divider />\r\n          <CardContent>\r\n            <Grid container spacing={3}>\r\n              <Grid item md={4} sm={6} xs={12}>\r\n                <TextField\r\n                  error={Boolean(touched.password && errors.password)}\r\n                  fullWidth\r\n                  helperText={touched.password && errors.password}\r\n                  label=\"Password\"\r\n                  name=\"password\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  type=\"password\"\r\n                  value={values.password}\r\n                  variant=\"outlined\"\r\n                />\r\n              </Grid>\r\n              <Grid item md={4} sm={6} xs={12}>\r\n                <TextField\r\n                  error={Boolean(\r\n                    touched.passwordConfirm && errors.passwordConfirm\r\n                  )}\r\n                  fullWidth\r\n                  helperText={touched.passwordConfirm && errors.passwordConfirm}\r\n                  label=\"Password Confirmation\"\r\n                  name=\"passwordConfirm\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  type=\"password\"\r\n                  value={values.passwordConfirm}\r\n                  variant=\"outlined\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            {errors.submit && (\r\n              <Box sx={{ mt: 3 }}>\r\n                <FormHelperText error>{errors.submit}</FormHelperText>\r\n              </Box>\r\n            )}\r\n          </CardContent>\r\n          <Divider />\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              justifyContent: \"flex-end\",\r\n              p: 2,\r\n            }}\r\n          >\r\n            <Button\r\n              color=\"primary\"\r\n              disabled={isSubmitting}\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n            >\r\n              Change Password\r\n            </Button>\r\n          </Box>\r\n        </Card>\r\n      </form>\r\n    )}\r\n  </Formik>\r\n);\r\n\r\nexport default AccountSecuritySettings;\r\n","import { useState } from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport {\r\n  Box,\r\n  Breadcrumbs,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  Link,\r\n  Tab,\r\n  Tabs,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  AccountGeneralSettings,\r\n  AccountSecuritySettings,\r\n} from \"../../components/dashboard/account\";\r\nimport useSettings from \"../../hooks/useSettings\";\r\nimport ChevronRightIcon from \"../../icons/ChevronRight\";\r\n\r\nconst tabs = [\r\n  { label: \"General\", value: \"general\" },\r\n  { label: \"Security\", value: \"security\" },\r\n];\r\n\r\nconst Account = () => {\r\n  const { settings } = useSettings();\r\n  const [currentTab, setCurrentTab] = useState(\"general\");\r\n\r\n\r\n  const handleTabsChange = (event, value) => {\r\n    setCurrentTab(value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Account | Hopon Admin</title>\r\n      </Helmet>\r\n      <Box\r\n        sx={{\r\n          backgroundColor: \"background.default\",\r\n          minHeight: \"100%\",\r\n          py: 8,\r\n        }}\r\n      >\r\n        <Container maxWidth={settings.compact ? \"xl\" : false}>\r\n          <Grid container justifyContent=\"space-between\" spacing={3}>\r\n            <Grid item>\r\n              <Typography color=\"textPrimary\" variant=\"h5\">\r\n                Account\r\n              </Typography>\r\n              <Breadcrumbs\r\n                aria-label=\"breadcrumb\"\r\n                separator={<ChevronRightIcon fontSize=\"small\" />}\r\n                sx={{ mt: 1 }}\r\n              >\r\n                <Link\r\n                  color=\"textPrimary\"\r\n                  component={RouterLink}\r\n                  to=\"/dashboard\"\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  Dashboard\r\n                </Link>\r\n                <Typography color=\"textSecondary\" variant=\"subtitle2\">\r\n                  Account\r\n                </Typography>\r\n              </Breadcrumbs>\r\n            </Grid>\r\n          </Grid>\r\n          <Box sx={{ mt: 3 }}>\r\n            <Tabs\r\n              indicatorColor=\"primary\"\r\n              onChange={handleTabsChange}\r\n              scrollButtons=\"auto\"\r\n              textColor=\"primary\"\r\n              value={currentTab}\r\n              variant=\"scrollable\"\r\n            >\r\n              {tabs.map((tab) => (\r\n                <Tab key={tab.value} label={tab.label} value={tab.value} />\r\n              ))}\r\n            </Tabs>\r\n          </Box>\r\n          <Divider />\r\n          <Box sx={{ mt: 3 }}>\r\n            {currentTab === \"general\" && <AccountGeneralSettings />}\r\n            {currentTab === \"security\" && <AccountSecuritySettings />}\r\n          </Box>\r\n        </Container>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n"],"sourceRoot":""}